
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package whileloop;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\006\000" +
    "\002\007\003\000\002\007\005\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\002\007\000\002\002\006" +
    "\000\002\002\005\000\002\002\004\000\002\003\005\000" +
    "\002\003\004\000\002\006\006\000\002\006\005\000\002" +
    "\006\004\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\004\004\005\001\002\000\004\002\047\001" +
    "\002\000\006\003\007\011\006\001\002\000\022\003\ufff8" +
    "\005\ufff8\010\ufff8\014\040\015\037\016\036\017\ufff8\020" +
    "\ufff8\001\002\000\004\002\uffed\001\002\000\012\003\ufffe" +
    "\005\ufffe\017\ufffe\020\ufffe\001\002\000\012\003\013\005" +
    "\016\017\012\020\015\001\002\000\006\003\ufffd\011\ufffd" +
    "\001\002\000\014\002\uffee\003\uffeb\005\uffeb\017\uffeb\020" +
    "\uffeb\001\002\000\006\003\034\011\006\001\002\000\006" +
    "\003\ufffc\011\ufffc\001\002\000\006\003\020\011\017\001" +
    "\002\000\006\003\027\007\026\001\002\000\004\002\uffef" +
    "\001\002\000\010\003\024\006\023\011\017\001\002\000" +
    "\010\003\ufffa\006\ufffa\011\ufffa\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufff0\001\002\000\010\003\ufffb\006" +
    "\ufffb\011\ufffb\001\002\000\006\003\030\011\006\001\002" +
    "\000\010\003\uffe8\006\uffe8\011\uffe8\001\002\000\010\003" +
    "\uffe9\006\uffe9\011\uffe9\001\002\000\006\003\032\010\033" +
    "\001\002\000\010\003\uffea\006\uffea\011\uffea\001\002\000" +
    "\010\003\ufff9\006\ufff9\011\ufff9\001\002\000\012\003\uffec" +
    "\005\uffec\017\uffec\020\uffec\001\002\000\012\003\uffff\005" +
    "\uffff\017\uffff\020\uffff\001\002\000\012\003\ufff1\011\ufff1" +
    "\012\ufff1\013\ufff1\001\002\000\012\003\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\001\002\000\012\003\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\001\002\000\012\003\043\011\042\012\046\013" +
    "\044\001\002\000\014\003\ufff7\005\ufff7\010\ufff7\017\ufff7" +
    "\020\ufff7\001\002\000\014\003\uffe7\005\uffe7\010\uffe7\017" +
    "\uffe7\020\uffe7\001\002\000\014\003\ufff5\005\ufff5\010\ufff5" +
    "\017\ufff5\020\ufff5\001\002\000\014\003\ufff6\005\ufff6\010" +
    "\ufff6\017\ufff6\020\ufff6\001\002\000\014\003\ufff4\005\ufff4" +
    "\010\ufff4\017\ufff4\020\ufff4\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\010\007\007\001\001\000\004\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\034" +
    "\001\001\000\002\001\001\000\006\005\020\006\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void print(String message){
		System.out.println(message);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // whileloop ::= whilekw condition dokw statementList endkw 
            {
              Object RESULT =null;
		 print("Recognized whileloop statement ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= whileloop EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // condition ::= condition condop expression 
            {
              Object RESULT =null;
		 print("Recognized condition list ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // condition ::= expression 
            {
              Object RESULT =null;
		 print("Recognized single expression as conditino ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // condop ::= andkw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condop",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // condop ::= orkw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condop",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statementList ::= statementList statement 
            {
              Object RESULT =null;
		 print("Recognized statement list ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statementList ::= statement 
            {
              Object RESULT =null;
		 print("Recognized single stetement ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= ID assign expression semcol 
            {
              Object RESULT =null;
		 print("Recognized asignment with expression ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= ID 
            {
              Object RESULT =null;
		 print("Recognized single var as an expression ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= ID op ID 
            {
              Object RESULT =null;
		 print("Recognized expression with two variables ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= ID op constant 
            {
              Object RESULT =null;
		 print("Recognized expression with var and constant ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= intconst 
            {
              Object RESULT =null;
		int intcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int intcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer intc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print("Recognized intconstant: " + intc + " ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant ::= strconst 
            {
              Object RESULT =null;
		int strcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String strc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print("Recognized strconstant: " + strc + " ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // op ::= plus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // op ::= minus 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // op ::= equal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // whileloop ::= whilekw condition dokw statementList error 
            {
              Object RESULT =null;
		 print("Missing end keyword in whileloop statement ... \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // whileloop ::= whilekw condition dokw error 
            {
              Object RESULT =null;
		 print("Missing statements list in whileloop statement ... \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // whileloop ::= whilekw condition error 
            {
              Object RESULT =null;
		 print("Missing do keyword in whileloop statement ... \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // whileloop ::= whilekw error 
            {
              Object RESULT =null;
		 print("Missing condition in whileloop statement ... \n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileloop",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= condition condop error 
            {
              Object RESULT =null;
		 print("Missing expression after operand in contitions list ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= condition error 
            {
              Object RESULT =null;
		 print("Missing conditional operator in contition ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= ID assign expression error 
            {
              Object RESULT =null;
		 print("Missing semicolon at the end of assign statement ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= ID assign error 
            {
              Object RESULT =null;
		 print("Missing expression in  assign statement ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= ID error 
            {
              Object RESULT =null;
		 print("Missing = in  assign statement ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= ID op error 
            {
              Object RESULT =null;
		 print("Missin second operand in expression ... "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
